import{_ as s,W as n,X as a,a1 as t}from"./framework-b609eea8.js";const e={},o=t(`<h1 id="symbols" tabindex="-1"><a class="header-anchor" href="#symbols" aria-hidden="true">#</a> Symbols</h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>自ECMAScript 2015起，<code>symbol</code>成为了一种新的原生类型，就像<code>number</code>和<code>string</code>一样。</p><p><code>symbol</code>类型的值是通过<code>Symbol</code>构造函数创建的。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> sym1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> sym2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可选的字符串key</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Symbols是不可改变且唯一的。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> sym2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> sym3 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

sym2 <span class="token operator">===</span> sym3<span class="token punctuation">;</span> <span class="token comment">// false, symbols是唯一的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像字符串一样，symbols也可以被用做对象属性的键。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>sym<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&quot;value&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>sym<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;value&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Symbols也可以与计算出的属性名声明相结合来声明对象的属性和类成员。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> getClassNameSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>getClassNameSymbol<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">C</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> className <span class="token operator">=</span> c<span class="token punctuation">[</span>getClassNameSymbol<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;C&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="众所周知的symbols" tabindex="-1"><a class="header-anchor" href="#众所周知的symbols" aria-hidden="true">#</a> 众所周知的Symbols</h2><p>除了用户定义的symbols，还有一些已经众所周知的内置symbols。 内置symbols用来表示语言内部的行为。</p><p>以下为这些symbols的列表：</p><table><thead><tr><th>属性值</th><th>含义</th></tr></thead><tbody><tr><td>Symbol.hasInstance</td><td>方法，会被instanceof运算符调用。构造器对象用来识别一个对象是否是其实例。</td></tr><tr><td>Symbol.isConcatSpreadable</td><td>布尔值，表示当在一个对象上调用Array.prototype.concat时，这个对象的数组元素是否可展开。</td></tr><tr><td>Symbol.iterator</td><td>方法，被for-of语句调用。返回 对象的默认迭代器。</td></tr><tr><td>Symbol.match</td><td>方法，被String.prototype.match调用。正则表达式用来匹配字符串。</td></tr><tr><td>Symbol.replace</td><td>方法，被String.prototype.replace调用。正则表达式用来替换字符串中匹配的子串。</td></tr><tr><td>Symbol.search</td><td>方法，被String.prototype.search调用。正则表达式返回被匹配部分在字符串中的索引。</td></tr><tr><td>Symbol.species</td><td>函数值，为一个构造函数。用来创建派生对象。</td></tr><tr><td>Symbol.split</td><td>方法，被String.prototype.split调用。正则表达式来用分割字符串。</td></tr><tr><td>Symbol.toPrimitive</td><td>方法，被ToPrimitive抽象操作调用。把对象转换为相应的原始值。</td></tr><tr><td>Symbol.toStringTag</td><td>方法，被内置方法Object.prototype.toString调用。返回创建对象时默认的字符串描述。</td></tr><tr><td>Symbol.unscopables</td><td>对象，它自己拥有的属性会被with作用域排除在外。</td></tr></tbody></table>`,15),p=[o];function c(l,i){return n(),a("div",null,p)}const r=s(e,[["render",c],["__file","symbols.html.vue"]]);export{r as default};
