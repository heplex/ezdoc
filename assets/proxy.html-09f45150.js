const e=JSON.parse('{"key":"v-063a3f8f","path":"/zh/develop/java/basis/proxy.html","title":"Java 代理模式详解","lang":"zh-CN","frontmatter":{"title":"Java 代理模式详解","category":"Java","tag":["Java基础"],"description":"1. 代理模式 代理模式是一种比较好理解的设计模式。简单来说就是 我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。 代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。 举个例子：新娘找来了自己的姨妈来代替自...","head":[["meta",{"property":"og:url","content":"https://doc.ezfri.com/zh/develop/java/basis/proxy.html"}],["meta",{"property":"og:site_name","content":"轻松星期五"}],["meta",{"property":"og:title","content":"Java 代理模式详解"}],["meta",{"property":"og:description","content":"1. 代理模式 代理模式是一种比较好理解的设计模式。简单来说就是 我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。 代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。 举个例子：新娘找来了自己的姨妈来代替自..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://doc.ezfri.com/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-30T10:01:14.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Java 代理模式详解"}],["meta",{"property":"article:author","content":"轻松星期五"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:modified_time","content":"2023-03-30T10:01:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 代理模式详解\\",\\"image\\":[\\"https://doc.ezfri.com/\\"],\\"dateModified\\":\\"2023-03-30T10:01:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"轻松星期五\\",\\"url\\":\\"https://doc.ezfri.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 代理模式","slug":"_1-代理模式","link":"#_1-代理模式","children":[]},{"level":2,"title":"2. 静态代理","slug":"_2-静态代理","link":"#_2-静态代理","children":[]},{"level":2,"title":"3. 动态代理","slug":"_3-动态代理","link":"#_3-动态代理","children":[{"level":3,"title":"3.1. JDK 动态代理机制","slug":"_3-1-jdk-动态代理机制","link":"#_3-1-jdk-动态代理机制","children":[]},{"level":3,"title":"3.2. CGLIB 动态代理机制","slug":"_3-2-cglib-动态代理机制","link":"#_3-2-cglib-动态代理机制","children":[]},{"level":3,"title":"3.3. JDK 动态代理和 CGLIB 动态代理对比","slug":"_3-3-jdk-动态代理和-cglib-动态代理对比","link":"#_3-3-jdk-动态代理和-cglib-动态代理对比","children":[]}]},{"level":2,"title":"4. 静态代理和动态代理的对比","slug":"_4-静态代理和动态代理的对比","link":"#_4-静态代理和动态代理的对比","children":[]},{"level":2,"title":"5. 总结","slug":"_5-总结","link":"#_5-总结","children":[]}],"git":{"createdTime":1680170474000,"updatedTime":1680170474000,"contributors":[{"name":"chun.zheng","email":"zcilive@gmail.com","commits":1}]},"readingTime":{"minutes":10.32,"words":3095},"filePathRelative":"zh/develop/java/basis/proxy.md","localizedDate":"2023年3月30日","autoDesc":true,"excerpt":""}');export{e as data};
