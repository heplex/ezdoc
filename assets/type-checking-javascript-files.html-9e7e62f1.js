import{_ as t,W as p,X as o,$ as s,a0 as n,Z as c,a1 as a,C as i}from"./framework-b609eea8.js";const l={},u=a(`<h1 id="javascript文件里的类型检查" tabindex="-1"><a class="header-anchor" href="#javascript文件里的类型检查" aria-hidden="true">#</a> JavaScript文件里的类型检查</h1><p>TypeScript 2.3以后的版本支持使用<code>--checkJs</code>对<code>.js</code>文件进行类型检查并提示错误的模式。</p><p>你可以通过添加<code>// @ts-nocheck</code>注释来忽略类型检查；相反你可以通过去掉<code>--checkJs</code>设置并添加<code>// @ts-check</code>注释来选则检查某些<code>.js</code>文件。 你还可以使用<code>// @ts-ignore</code>来忽略本行的错误。</p><p>下面是一些值得注意的类型检查在<code>.js</code>文件与<code>.ts</code>文件上的差异：</p><h2 id="在jsdoc上使用类型" tabindex="-1"><a class="header-anchor" href="#在jsdoc上使用类型" aria-hidden="true">#</a> 在JSDoc上使用类型</h2><p><code>.js</code>文件里，类型可以和在<code>.ts</code>文件里一样被推断出来。 同样地，当类型不能被推断时，它们可以通过JSDoc来指定，就好比在<code>.ts</code>文件里那样。</p><p>JSDoc注解修饰的声明会被设置为这个声明的类型。比如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/** @type {number} */</span>
<span class="token keyword">var</span> x<span class="token punctuation">;</span>

x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">// OK</span>
x <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// Error: boolean is not assignable to number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),d={href:"https://github.com/Microsoft/TypeScript/wiki/JSDoc-support-in-JavaScript",target:"_blank",rel:"noopener noreferrer"},r=a(`<h2 id="从类内部赋值语句推断属性声明" tabindex="-1"><a class="header-anchor" href="#从类内部赋值语句推断属性声明" aria-hidden="true">#</a> 从类内部赋值语句推断属性声明</h2><p>ES2015/ES6不存在类属性的声明。属性是动态的赋予的，就如同对象字面量一样。</p><p>在<code>.js</code>文件里，属性声明是由类内部的属性赋值语句推断出来的。属性的类型是赋值语句右侧所有值的联合。构造函数里定义的属性是永远存在的，在方法存取器里定义的被认为是可选的。</p><p>使用JSDoc修饰属性赋值来指定属性类型。例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/** @type {number | undefined} */</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">C</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
c<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment">// OK</span>
c<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// Error: string is not assignable to number|undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果属性永远都不在类的内部被设置，那么它们被当成是未知的。如果类具有只读的属性，考虑在构造函数里给它初始化成<code>undefined</code>，例如<code>this.prop = undefined;</code>。</p><h2 id="commonjs模块输入支持" tabindex="-1"><a class="header-anchor" href="#commonjs模块输入支持" aria-hidden="true">#</a> CommonJS模块输入支持</h2><p><code>.js</code>文件支持将CommonJS模块做为输入模块格式。对<code>exports</code>和<code>module.exports</code>的赋值被识别为导出声明。 相似地，<code>require</code>函数调用被识别为模块导入。例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// import module &quot;fs&quot;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// export function readFile</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">readFile</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象字面量是开放的" tabindex="-1"><a class="header-anchor" href="#对象字面量是开放的" aria-hidden="true">#</a> 对象字面量是开放的</h2><p>默认地，变量声明中的对象字面量本身就提供了类型声明。新的成员不能被加到对象中去。 这个规则在<code>.js</code>文件里被放宽了；对象字面量具有开放的类型，允许添加并访问原先没有定义的属性。例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// Allowed</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对象字面量具有默认的索引签名<code>[x:string]: any</code>，它们可以被当成开放的映射而不是封闭的对象。</p><p>与其它JS检查行为相似，这种行为可以通过指定JSDoc类型来改变，例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/** @type  */</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// Error, type {a: number} does not have property b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数参数是默认可选的" tabindex="-1"><a class="header-anchor" href="#函数参数是默认可选的" aria-hidden="true">#</a> 函数参数是默认可选的</h2><p>由于JS不支持指定可选参数（不指定一个默认值），<code>.js</code>文件里所有函数参数都被当做可选的。使用比预期少的参数调用函数是允许的。</p><p>需要注意的一点是，使用过多的参数调用函数会得到一个错误。</p><p>例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// OK, second argument considered optional</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error, too many arguments</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用JSDoc注解的函数会被从这条规则里移除。使用JSDoc可选参数语法来表示可选性。比如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/**
 * @param {string} [somebody] - Somebody&#39;s name.
 */</span>
<span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>somebody<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>somebody<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        somebody <span class="token operator">=</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Hello &#39;</span> <span class="token operator">+</span> somebody<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="由arguments推断出的var-args参数声明" tabindex="-1"><a class="header-anchor" href="#由arguments推断出的var-args参数声明" aria-hidden="true">#</a> 由<code>arguments</code>推断出的var-args参数声明</h2><p>如果一个函数的函数体内有对<code>arguments</code>的引用，那么这个函数会隐式地被认为具有一个var-arg参数（比如:<code>(...arg: any[]) =&gt; any)</code>）。使用JSDoc的var-arg语法来指定<code>arguments</code>的类型。</p><h2 id="未指定的类型参数默认为any" tabindex="-1"><a class="header-anchor" href="#未指定的类型参数默认为any" aria-hidden="true">#</a> 未指定的类型参数默认为<code>any</code></h2><p>未指定的泛型参数类型将默认为<code>any</code>。有如下几种情形：</p><h3 id="在extends语句中" tabindex="-1"><a class="header-anchor" href="#在extends语句中" aria-hidden="true">#</a> 在extends语句中</h3><p>例如，<code>React.Component</code>被定义成具有两个泛型参数，<code>Props</code>和<code>State</code>。 在一个<code>.js</code>文件里，没有一个合法的方式在extends语句里指定它们。默认地参数类型为<code>any</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>b<span class="token punctuation">;</span> <span class="token comment">// Allowed, since this.props is of type any</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用JSDoc的<code>@augments</code>来明确地指定类型。例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @augments {Component&lt;{a: number}, State&gt;}
 */</span>
<span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>b<span class="token punctuation">;</span> <span class="token comment">// Error: b does not exist on {a:number}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在jsdoc引用中" tabindex="-1"><a class="header-anchor" href="#在jsdoc引用中" aria-hidden="true">#</a> 在JSDoc引用中</h3><p>JSDoc里未指定的泛型参数默认为<code>any</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/** @type{Array} */</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

x<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// OK</span>
x<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK, x is of type Array&lt;any&gt;</span>


<span class="token comment">/** @type{Array.&lt;number&gt;} */</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

y<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// OK</span>
y<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error, string is not assignable to number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在函数调用中" tabindex="-1"><a class="header-anchor" href="#在函数调用中" aria-hidden="true">#</a> 在函数调用中</h3><p>泛型函数的调用使用<code>arguments</code>来推断泛型参数。有时候，这个流程不能够推断出类型，大多是因为缺少推断的源；在这种情况下，泛型参数类型默认为<code>any</code>。例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

p<span class="token punctuation">;</span> <span class="token comment">// Promise&lt;any&gt;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37);function k(m,v){const e=i("ExternalLinkIcon");return p(),o("div",null,[u,s("p",null,[n("你可以在这里找到所有JSDoc支持的模式，"),s("a",d,[n("JSDoc"),c(e)]),n("文档。")]),r])}const h=t(l,[["render",k],["__file","type-checking-javascript-files.html.vue"]]);export{h as default};
