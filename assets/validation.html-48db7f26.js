import{_ as o,W as p,X as c,$ as n,a0 as a,Z as t,a1 as e,C as i}from"./framework-b609eea8.js";const l="/assets/image-20230404141545-f0e3be29.png",u="/assets/image-20230404141626-007cea78.png",d="/assets/image-20230404143700-27e03c5d.png",r="/assets/image-20230404143832-16eebf00.png",k="/assets/image-20230404144631-b7465bf9.png",v="/assets/image-20230404144957-42af64c4.png",m="/assets/image-20230404145028-43e81a28.png",g="/assets/image-20230404145816-50659588.png",b="/assets/image-20230404145838-2a822cfe.png",h="/assets/image-20230404145852-abf30eee.png",f={},y=n("h1",{id:"数据校验",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据校验","aria-hidden":"true"},"#"),a(" 数据校验")],-1),w=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述","aria-hidden":"true"},"#"),a(" 概述")],-1),x=n("p",null,"当我们想提供可靠的 API 接口，对参数的校验，以保证最终数据入库的正确性，是必不可少的活。例如说，用户注册时，会校验手机格式的正确性，密码非弱密码。 可惜的是，在翻开自己的项目的时候，会发现大量的 API 接口，我们并没有添加相应的参数校验，而是把这个活交给调用方（例如说前端）来完成。但实际上，黑客可以绕过浏览器直接使用HTTP工具，模拟请求向后端的 API 接口传入大量非法数据来达成不可告人的目的。又或者前端错误的校验逻辑导致用户在使用时传入了不合理的数据，导致大量脏数据的产生。这些原因都会导致系统的不稳定。因此参数的校验在项目中是必不可少的。但是显式的参数校验，甚至是对每个接口传参进行校验会导致大量冗余代码，影响代码可读性不说，一旦有改动，会导致大面积变动，增加了改动成本，因此我们也需要一个校验框架来达到数据校验的目的。",-1),V=n("p",null,"Java 早在 2009 年就提出了 Bean Validation 规范，并且已经历经 JSR303、JSR349、JSR380 三次标准的置顶，发展到了 2.0 。",-1),_={href:"https://beanvalidation.org/specification/",target:"_blank",rel:"noopener noreferrer"},T=n("p",null,"Bean Validation 1.0 ：Bean Validation 1.0 (JSR 303) was the first version of Java's standard for object validation. It was released in 2009 and is part of Java EE 6. You can learn more about Bean Validation 1.0 here (specification text, API docs etc).",-1),S=n("p",null,"Bean Validation 1.1 ：Bean Validation 1.1 (JSR 349) was finished in 2013 and is part of Java EE 7. Its main contributions are method-level validation, integration with CDI, group conversion and some more. You can learn more about Bean Validation 1.1 here (specification text, full change log, API docs etc).",-1),O=n("p",null,"Bean Validation 2.0 ：Bean Validation 2.0 (JSR 380) was finished in August 2017.",-1),A=n("p",null,"It's part of Java EE 8 (but can of course be used with plain Java SE as the previous releases).",-1),E=n("p",null,"You can learn more about Bean Validation 2.0 here (specification text, full change log, API docs etc).",-1),j=n("p",null,"Bean Validation只提供规范，不提供具体的实现。",-1),D={href:"https://mvnrepository.com/artifact/javax.validation/validation-api",target:"_blank",rel:"noopener noreferrer"},U=n("li",null,"在 javax.validation.constraints 包下，定义了一系列的校验注解。例如说，@NotNull、@NotEmpty 。",-1),q=n("p",null,"我们可以选择一个实现了 Bean Validation 规范的数据校验框架",-1),I={href:"https://hibernate.org/validator/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://bval.apache.org/",target:"_blank",rel:"noopener noreferrer"},B=e('<p>目前广为使用的是 Hibernate Validator</p><p>但是，我们在使用 Spring 的项目中，因为 Spring Validation 提供了对 Bean Validation 的内置封装支持，可以使用 @Validated 注解，实现声明式校验，而无需直接调用 Bean Validation 提供的 API 方法。而在实现原理上，也是基于 Spring AOP 拦截，实现校验相关的操作。</p><p>这一点，类似 Spring Transaction 事务，通过 @Transactional 注解，实现声明式事务。而在 Spring Validation 内部，最终还是调用不同的 Bean Validation 的实现框架。例如说，Hibernate Validator 。</p><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解" aria-hidden="true">#</a> 注解</h2><h3 id="bean-validation-定义的约束注解" tabindex="-1"><a class="header-anchor" href="#bean-validation-定义的约束注解" aria-hidden="true">#</a> Bean Validation 定义的约束注解</h3><ul><li>空和非空检查 <ul><li><code>@NotBlank</code> ：只能用于字符串不为 null ，并且字符串 #trim() 以后 length 要大于 0 。</li><li><code>@NotEmpty</code> ：集合对象的元素不为 0 ，即集合不为空，也可以用于字符串不为 null 。</li><li><code>@NotNull</code> ：不能为 null 。</li><li><code>@Null</code> ：必须为 null 。</li></ul></li><li>数值检查 <ul><li><code>@DecimalMax(value)</code> ：被注释的元素必须是一个数字，其值必须小于等于指定的最大值。</li><li><code>@DecimalMin(value)</code> ：被注释的元素必须是一个数字，其值必须大于等于指定的最小值。</li><li><code>@Digits(integer, fraction)</code> ：被注释的元素必须是一个数字，其值必须在可接受的范围内。</li><li><code>@Positive</code> ：判断正数。</li><li><code>@PositiveOrZero</code> ：判断正数或 0 。</li><li><code>@Max(value)</code> ：该字段的值只能小于或等于该值。</li><li><code>@Min(value)</code> ：该字段的值只能大于或等于该值。</li><li><code>@Negative</code> ：判断负数。</li><li><code>@NegativeOrZero</code> ：判断负数或 0 。</li></ul></li><li>Boolean 值检查 <ul><li><code>@AssertFalse</code> ：被注释的元素必须为 <code>true</code> 。</li><li><code>@AssertTrue</code> ：被注释的元素必须为 <code>false</code> 。</li></ul></li><li>长度检查 <ul><li><code>@Size(max, min)</code> ：检查该字段的 <code>size</code> 是否在 <code>min</code> 和 <code>max</code> 之间，可以是字符串、数组、集合、Map 等。</li></ul></li><li>日期检查 <ul><li><code>@Future</code> ：被注释的元素必须是一个将来的日期。</li><li><code>@FutureOrPresent</code> ：判断日期是否是将来或现在日期。</li><li><code>@Past</code> ：检查该字段的日期是在过去。</li><li><code>@PastOrPresent</code> ：判断日期是否是过去或现在日期。</li></ul></li><li>其它检查 <ul><li><code>@Email</code> ：被注释的元素必须是电子邮箱地址。</li><li><code>@Pattern(value)</code> ：被注释的元素必须符合指定的正则表达式。</li></ul></li></ul><h3 id="hibernate-validator-附加的约束注解" tabindex="-1"><a class="header-anchor" href="#hibernate-validator-附加的约束注解" aria-hidden="true">#</a> Hibernate Validator 附加的约束注解</h3><p><code>org.hibernate.validator.constraints</code> 包下，定义了一系列的约束( constraint )注解。如下：</p><ul><li><code>@Range(min=, max=)</code> ：被注释的元素必须在合适的范围内。</li><li><code>@Length(min=, max=)</code> ：被注释的字符串的大小必须在指定的范围内。</li><li><code>@URL(protocol=,host=,port=,regexp=,flags=)</code> ：被注释的字符串必须是一个有效的 URL 。</li><li><code>@SafeHtml</code> ：判断提交的 HTML 是否安全。例如说，不能包含 javascript 脚本等等。</li><li>... 等等，就不一一列举了。</li></ul><h3 id="valid-和-validated" tabindex="-1"><a class="header-anchor" href="#valid-和-validated" aria-hidden="true">#</a> @Valid 和 @Validated</h3>',10),P={href:"https://docs.oracle.com/javaee/7/api/javax/validation/Valid.html",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"@Valid",-1),M={href:"https://github.com/spring-projects/spring-framework/blob/main/spring-context/src/main/java/org/springframework/validation/annotation/Validated.java",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"@Validated",-1),G=n("code",null,"@Validated",-1),L=n("code",null,"value",-1),H=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Validated.java</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>声明式校验 Spring Validation 仅对 <code>@Validated</code> 注解，实现声明式校验。</p></li><li><p>分组校验 Bean Validation 提供的 <code>@Valid</code> 注解，因为没有分组校验的属性，所以无法提供分组校验。此时，我们只能使用 <code>@Validated</code> 注解。</p></li><li><p>嵌套校验 相比来说，<code>@Valid</code> 注解的地方，多了【成员变量】。这就导致，如果有嵌套对象的时候，只能使用 <code>@Valid</code> 注解。例如说：</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// User.java</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Valid</span>
    <span class="token keyword">private</span> <span class="token class-name">UserProfile</span> profile<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// UserProfile.java</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProfile</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@NotBlank</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不在 <code>User.profile</code> 属性上，添加 <code>@Valid</code> 注解，就会导致 <code>UserProfile.nickname</code> 属性，不会进行校验。 当然，<code>@Valid</code> 注解的地方，也多了【构造方法】和【方法返回】，所以在有这方面的诉求的时候，也只能使用 <code>@Valid</code> 注解。</p><p>总的来说，绝大多数场景下，我们使用 <code>@Validated</code> 注解即可。</p><p>而在有嵌套校验的场景，我们使用 <code>@Valid</code> 注解添加到成员属性上。</p><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h2><p>本小节，我们会实现在 Spring Boot 中，对 SpringMVC 的 Controller 的 API 接口参数，实现参数校验。</p><p>同时，因为我们在 Service 也会有参数校验的诉求，所以我们也会提供示例。</p><h3 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖" aria-hidden="true">#</a> 引入依赖</h3><p>在 <code>pom.xml</code> 文件中，引入相关依赖。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- lookup parent from repository --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lab-22-validation-01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 实现对 Spring MVC 的自动化配置 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- 保证 Spring AOP 相关的依赖包 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- 方便等会写单元测试 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意:</p><ul><li><p>spring-boot-starter-web 依赖里，已经默认引入 hibernate-validator 依赖，所以本示例使用的是 Hibernate Validator 作为 Bean Validation 的实现框架。</p></li><li><p>在 Spring Boot 体系中，也提供了 spring-boot-starter-validation 依赖。在这里，我们并没有引入。为什么呢？该依赖的目的，重点也是引入 hibernate-validator 依赖，这在 spring-boot-starter-web 已经引入，所以无需重复引入。</p></li></ul><h3 id="application" tabindex="-1"><a class="header-anchor" href="#application" aria-hidden="true">#</a> Application</h3><p>创建 <code>Application.java</code> 类，配置 <code>@SpringBootApplication</code> 注解即可。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>exposeProxy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// http://www.voidcn.com/article/p-zddcuyii-bpt.html</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>添加 <code>@EnableAspectJAutoProxy</code> 注解，重点是配置 <code>exposeProxy = true</code> ，因为我们希望 Spring AOP 能将当前代理对象设置到 AopContext 中。具体用途，我们会在下文看到。</li></ul><h3 id="useradddto" tabindex="-1"><a class="header-anchor" href="#useradddto" aria-hidden="true">#</a> UserAddDTO</h3><p>在 com.ezfri.springboot.validation.dto 包路径下，创建 UserAddDTO 类，为用户添加 DTO 类。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// UserAddDTO.java</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserAddDTO</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 账号
     */</span>
    <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;登录账号不能为空&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;账号长度为 5-16 位&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">&quot;^[A-Za-z0-9]+$&quot;</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;账号格式为数字以及字母&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 密码
     */</span>
    <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;密码不能为空&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;密码长度为 4-16 位&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    
    <span class="token comment">// ... 省略 setting/getting 方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usercontroller" tabindex="-1"><a class="header-anchor" href="#usercontroller" aria-hidden="true">#</a> UserController</h3><p>在 com.ezfri.springboot.validation.controller 包路径下，创建 UserController 类，提供用户 API 接口。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// UserController.java</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Validated</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/get&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;编号必须大于 0&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[get][id: {}]&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/add&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token class-name">UserAddDTO</span> addDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[add][addDTO: {}]&quot;</span><span class="token punctuation">,</span> addDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>在类上，添加 <code>@Validated</code> 注解，表示 UserController 是所有接口都需要进行参数校验。</p></li><li><p>对于 <code>#get(id)</code> 方法，我们在 id 参数上，添加了 <code>@Min</code> 注解，校验 <code>id</code> 必须大于 0 。校验不通过示例如下图：</p></li></ul><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>对于 <code>#add(addDTO)</code> 方法，我们在 <code>addDTO</code> 参数上，添加了 <code>@Valid</code> 注解，实现对该参数的校验。校验不通过示例如下图：</li></ul><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>errors 字段，参数错误明细数组。每一个数组元素，对应一个参数错误明细。这里，username 违背了长度不满足 [5, 16] 。 示例我们是已经成功跑通了，但是呢，这里有几点差异性，我们要来理解下。</li></ul><ol><li><code>#get(id)</code> 方法上，我们并没有给 <code>id</code> 添加 <code>@Valid</code> 注解，而 <code>#add(addDTO)</code> 方法上，我们给 <code>addDTO</code> 添加 <code>@Valid</code> 注解。这个差异，是为什么呢？</li></ol>',30),z=n("code",null,"UserController",-1),F=n("code",null,"@Validated",-1),J={href:"https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationInterceptor.java",target:"_blank",rel:"noopener noreferrer"},Y=e('<ul><li>对于 <code>#get(id)</code> 方法，需要校验的参数 <code>id</code> ，是平铺开的，所以无需添加 <code>@Valid</code> 注解。</li><li>对于 <code>#add(addDTO)</code> 方法，需要校验的参数 <code>addDTO</code> ，实际相当于嵌套校验，要校验的参数的都在 <code>addDTO</code> 里面，所以需要添加 <code>@Valid</code> 注解。</li></ul><ol start="2"><li><code>#get(id)</code> 方法的返回的结果是 <code>status = 500</code> ，而 <code>#add(addDTO)</code> 方法的返回的结果是 <code>status = 400</code> 。</li></ol>',2),Q=n("code",null,"#get(id)",-1),Z={href:"https://github.com/eclipse-ee4j/beanvalidation-api/blob/master/src/main/java/javax/validation/ConstraintViolationException.java",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"#add(addDTO)",-1),X=n("code",null,"addDTO",-1),$={href:"https://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/validation.html#validation-binder",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"DataBinder#validate(Object... validationHints)",-1),nn={href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/validation/BindException.html",target:"_blank",rel:"noopener noreferrer"},an={href:"https://hyrepo.com/tech/spring-mvc-error-handling/",target:"_blank",rel:"noopener noreferrer"},sn=n("li",null,[n("p",null,"对于 BindException 异常，处理成 400 的状态码。")],-1),tn=n("li",null,[n("p",null,"对于 ConstraintViolationException 异常，没有特殊处理，所以处理成 500 的状态码。 这里，我们在抛个问题，如果 #add(addDTO 方法，如果参数正确，在走完 DataBinder 中的参数校验后，会不会在走一遍 MethodValidationInterceptor 的拦截器呢？")],-1),en=n("p",null,[a("答案是会。这样，就会导致浪费。所以 Controller 类里，如果只有类似的 "),n("code",null,"#add(addDTO)"),a(" 方法的嵌套校验，那么我可以不在 Controller 类上添加 "),n("code",null,"@Validated"),a(" 注解。从而实现，仅使用 "),n("code",null,"DataBinder"),a(" 中来做参数校验。")],-1),on=n("code",null,"#get(id)",-1),pn=n("code",null,"#add(addDTO)",-1),cn={href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/ExceptionHandler.html",target:"_blank",rel:"noopener noreferrer"},ln=n("code",null,"@ExceptionHandler",-1),un=e(`<h3 id="userservice" tabindex="-1"><a class="header-anchor" href="#userservice" aria-hidden="true">#</a> UserService</h3><p>相比在 Controller 添加参数校验来说，在 Service 进行参数校验，会更加安全可靠。个人建议的话，Controller 的参数校验可以不做，Service 的参数校验一定要做。</p><p>在 <code>com.ezfri.springboot.validation.service</code> 包路径下，创建 UserService 类，提供用户 Service 逻辑。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// UserService.java</span>

<span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@Validated</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;编号必须大于 0&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[get][id: {}]&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token class-name">UserAddDTO</span> addDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[add][addDTO: {}]&quot;</span><span class="token punctuation">,</span> addDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add01</span><span class="token punctuation">(</span><span class="token class-name">UserAddDTO</span> addDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>addDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add02</span><span class="token punctuation">(</span><span class="token class-name">UserAddDTO</span> addDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>addDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">UserService</span> <span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>和 UserController 的方法是一致的，包括注解。</li><li>额外添加了 <code>#add01(addDTO)</code> 和 <code>#add02(addDTO)</code> 方法，用于演示方法内部调用。</li></ul><p>创建 UserServiceTest 测试类，我们来测试一下简单的 UserService 的每个操作。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token comment">// UserService.java</span>
<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        userService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserAddDTO</span> addDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserAddDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>addDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserAddDTO</span> addDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserAddDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userService<span class="token punctuation">.</span><span class="token function">add01</span><span class="token punctuation">(</span>addDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserAddDTO</span> addDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserAddDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userService<span class="token punctuation">.</span><span class="token function">add02</span><span class="token punctuation">(</span>addDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><ol><li><code>#testGet()</code> 测试方法 执行，抛出 ConstraintViolationException 异常。日志如下：</li></ol><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>javax.validation.ConstraintViolationException: get.id: 编号必须大于 0 
at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:116)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>符合期望</p><ol start="2"><li><code>#testAdd()</code> 测试方法 执行，抛出 ConstraintViolationException 异常。日志如下：</li></ol><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>javax.validation.ConstraintViolationException: add.addDTO.username: 登录账号不能为空, add.addDTO.password: 密码不能为空
at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:116)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>符合期望。不同于我们在调用 <code>UserController#add(addDTO)</code> 方法，这里被 MethodValidationInterceptor 拦截，进行参数校验，而不是 DataBinder 当中。</p><ol start="3"><li><p><code>#testAdd01()</code> 测试方法 执行，正常结束。因为进行 <code>this.add(addDTO)</code> 调用时，<code>this</code> 并不是 Spring AOP 代理对象，所以并不会被 MethodValidationInterceptor 所拦截。</p></li><li><p><code>#testAdd02()</code>测试方法</p></li></ol><p>执行，抛出 IllegalStateException 异常。日志如下：</p><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>java.lang.IllegalStateException: Cannot find current proxy: Set &#39;exposeProxy&#39; property on Advised to &#39;true&#39; to make it available.
at org.springframework.aop.framework.AopContext.currentProxy(AopContext.java:69)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>理论来说，因为我们配置了 @EnableAspectJAutoProxy(exposeProxy = true) 注解，在 Spring AOP 拦截时，通过调用 AopContext.currentProxy() 方法，是可以获取到当前的代理对象。结果，此处抛出 IllegalStateException 异常。</li><li>显然，这里并没有将当前的代理对象，设置到 AopContext 中，所以抛出 IllegalStateException 异常。目前猜测，可能是 BUG 。</li></ul><h2 id="处理校验异常" tabindex="-1"><a class="header-anchor" href="#处理校验异常" aria-hidden="true">#</a> 处理校验异常</h2><h3 id="globalexceptionhandler" tabindex="-1"><a class="header-anchor" href="#globalexceptionhandler" aria-hidden="true">#</a> GlobalExceptionHandler</h3><p>在GlobalExceptionHandler中增加增加 #constraintViolationExceptionHandler(...) 方法，处理 ConstraintViolationException 异常。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// GlobalExceptionHandler.java</span>

<span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">ConstraintViolationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">constraintViolationExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ConstraintViolationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;[constraintViolationExceptionHandler]&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 拼接错误</span>
    <span class="token class-name">StringBuilder</span> detailMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConstraintViolation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> constraintViolation <span class="token operator">:</span> ex<span class="token punctuation">.</span><span class="token function">getConstraintViolations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用 ; 分隔多个错误</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>detailMessage<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            detailMessage<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 拼接内容到其中</span>
        detailMessage<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>constraintViolation<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 包装 CommonResult 结果</span>
    <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">ServiceExceptionEnum</span><span class="token punctuation">.</span><span class="token constant">INVALID_REQUEST_PARAM_ERROR</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">ServiceExceptionEnum</span><span class="token punctuation">.</span><span class="token constant">INVALID_REQUEST_PARAM_ERROR</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> detailMessage<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>其中，ServiceExceptionEnum为业务异常枚举类，包含错误码信息</li><li>将每个约束的错误内容提示，拼接起来，使用 ; 分隔。</li><li>重新请求 UserController#get(id) 对应的接口，响应结果如下：</li></ul><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>修改 GlobalExceptionHandler 类，增加 <code>#bindExceptionHandler(...)</code> 方法，处理 BindException 异常。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// GlobalExceptionHandler.java</span>

<span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">BindException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">bindExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">BindException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;[bindExceptionHandler]&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 拼接错误</span>
    <span class="token class-name">StringBuilder</span> detailMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ObjectError</span> objectError <span class="token operator">:</span> ex<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用 ; 分隔多个错误</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>detailMessage<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            detailMessage<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 拼接内容到其中</span>
        detailMessage<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>objectError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 包装 CommonResult 结果</span>
    <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">ServiceExceptionEnum</span><span class="token punctuation">.</span><span class="token constant">INVALID_REQUEST_PARAM_ERROR</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">ServiceExceptionEnum</span><span class="token punctuation">.</span><span class="token constant">INVALID_REQUEST_PARAM_ERROR</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> detailMessage<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将每个约束的错误内容提示，拼接起来，使用 ; 分隔。</li><li>重新请求 UserController#add(addDTO) 对应的接口，响应结果如下：</li></ul><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，通过全局异常控制，可以让错误的返回格式变得统一美观</p><h2 id="自定义约束" tabindex="-1"><a class="header-anchor" href="#自定义约束" aria-hidden="true">#</a> 自定义约束</h2><p>在大多数项目中，无论是 Bean Validation 定义的约束，还是 Hibernate Validator 附加的约束，都是无法满足我们复杂的业务场景。所以，我们需要自定义约束。</p><p>开发自定义约束一共只要两步：1）编写自定义约束的注解；2）编写自定义的校验器 ConstraintValidator 。</p><p>下面，就让我们一起来实现一个自定义约束，用于校验参数必须在枚举值的范围内。</p><h3 id="intarrayvaluable" tabindex="-1"><a class="header-anchor" href="#intarrayvaluable" aria-hidden="true">#</a> IntArrayValuable</h3><p>在 com.ezfri.springboot.validation.core.validator 包路径下，创建 IntArrayValuable 接口，用于返回值数组。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// IntArrayValuable.java</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IntArrayValuable</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> int 数组
     */</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为对于一个枚举类来说，我们无法获得它具体有那些值。所以，我们会要求这个枚举类实现该接口，返回它拥有的所有枚举值。</p><h3 id="genderenum" tabindex="-1"><a class="header-anchor" href="#genderenum" aria-hidden="true">#</a> GenderEnum</h3><p>在 com.ezfri.springboot.validation.constants 包路径下，创建 GenderEnum 枚举类，枚举性别。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// GenderEnum.java</span>

<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">GenderEnum</span> <span class="token keyword">implements</span> <span class="token class-name">IntArrayValuable</span> <span class="token punctuation">{</span>

    <span class="token function">MALE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">FEMALE</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;女&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 值数组
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">ARRAYS</span> <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">GenderEnum</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 性别值
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> value<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 性别名
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token class-name">GenderEnum</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> value<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">ARRAYS</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>实现 IntArrayValuable 接口，返回值数组 <code>ARRAYS</code> 。</li></ul><h3 id="inenum" tabindex="-1"><a class="header-anchor" href="#inenum" aria-hidden="true">#</a> @InEnum</h3><p>在 com.ezfri.springboot.validation.core.validator 包路径下，创建 @InEnum 自定义约束的注解。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// InEnum.java</span>

<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token constant">TYPE_USE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy <span class="token operator">=</span> <span class="token class-name">InEnumValidator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">InEnum</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> 实现 IntArrayValuable 接口的
     */</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">IntArrayValuable</span><span class="token punctuation">&gt;</span></span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> 提示内容
     */</span>
    <span class="token class-name">String</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;必须在指定范围 {value}&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> 分组
     */</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> Payload 数组
     */</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     *  Defines several <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token annotation punctuation">@InEnum</span></span></span><span class="token punctuation">}</span> constraints on the same element.
     */</span>
    <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token constant">TYPE_USE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Documented</span>
    <span class="token annotation punctuation">@interface</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>

        <span class="token class-name">InEnum</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在类上，添加 @@Constraint(validatedBy = InEnumValidator.class) 注解，设置使用的自定义约束的校验器。</li><li><code>value()</code> 属性，设置实现 IntArrayValuable 接口的类。这样，我们就能获得参数需要校验的值数组。</li><li><code>message()</code> 属性，设置提示内容。默认为 <code>&quot;必须在指定范围 {value}&quot;</code> 。</li><li>其它属性，复制粘贴即可，都可以忽略不用理解。</li></ul><h3 id="inenumvalidator" tabindex="-1"><a class="header-anchor" href="#inenumvalidator" aria-hidden="true">#</a> InEnumValidator</h3><p>在 com.ezfri.springboot.validation.core.validator 包路径下，创建 InEnumValidator 自定义约束的校验器。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// InEnumValidator.java</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InEnumValidator</span> <span class="token keyword">implements</span> <span class="token class-name">ConstraintValidator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InEnum</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 值数组
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">InEnum</span> annotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">IntArrayValuable</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>values<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>values <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>values <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> value<span class="token punctuation">,</span> <span class="token class-name">ConstraintValidatorContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// &lt;2.1&gt; 校验通过</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// &lt;2.2.1&gt;校验不通过，自定义提示语句（因为，注解上的 value 是枚举类，无法获得枚举类的实际值）</span>
        context<span class="token punctuation">.</span><span class="token function">disableDefaultConstraintViolation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 禁用默认的 message 的值</span>
        context<span class="token punctuation">.</span><span class="token function">buildConstraintViolationWithTemplate</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getDefaultConstraintMessageTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\{value}&quot;</span><span class="token punctuation">,</span> values<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConstraintViolation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新添加错误提示语句      </span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// &lt;2.2.2.&gt;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>实现 ConstraintValidator 接口。 <ul><li>第一个泛型为 A extends Annotation ，设置对应的自定义约束的注解。例如说，这里我们设置了 <code>@InEnum</code> 注解。</li><li>第二个泛型为 T ，设置对应的参数值的类型。例如说，这里我们设置了 Integer 类型。</li></ul></li><li>实现 <code>#initialize(annotation)</code> 方法，获得 <code>@InEnum</code> 注解的 <code>values()</code> 属性，获得值数组，设置到 values 属性种。</li><li>实现 <code>#isValid(value, context)</code> 方法，实现校验参数值，是否在 <code>values</code> 范围内。 <ul><li><code>&lt;2.1&gt;</code> 处，校验参数值在范围内，直接返回 <code>true</code> ，校验通过。</li><li><code>&lt;2.2.1&gt;</code> 处，校验不通过，自定义提示语句。</li><li><code>&lt;2.2.2&gt;</code> 处，校验不通过，所以返回 <code>false</code> 。 至此，我们已经完成了自定义约束的实现。下面，我们来进行下测试。</li></ul></li></ul><h3 id="userupdategenderdto" tabindex="-1"><a class="header-anchor" href="#userupdategenderdto" aria-hidden="true">#</a> UserUpdateGenderDTO</h3><p>在 com.ezfri.springboot.validation.dto 包路径下，创建 UserUpdateGenderDTO 类，为用户更新性别 DTO。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// UserUpdateGenderDTO.java</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserUpdateGenderDTO</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 用户编号
     */</span>
    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;用户编号不能为空&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 性别
     */</span>
    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;性别不能为空&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@InEnum</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">GenderEnum</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;性别必须是 {value}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> gender<span class="token punctuation">;</span>
    
    <span class="token comment">// ... 省略 set/get 方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 <code>gender</code> 字段上，添加 <code>@InEnum(value = GenderEnum.class, message = &quot;性别必须是 {value}&quot;)</code> 注解，限制传入的参数值，必须在 GenderEnum 枚举范围内。</li></ul><h3 id="usercontroller-1" tabindex="-1"><a class="header-anchor" href="#usercontroller-1" aria-hidden="true">#</a> UserController</h3><p>修改 UserController 类，增加修改性别 API 接口。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// UserController.java</span>

<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/update_gender&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateGender</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token class-name">UserUpdateGenderDTO</span> updateGenderDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[updateGender][updateGenderDTO: {}]&quot;</span><span class="token punctuation">,</span> updateGenderDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模拟请求该 API 接口，响应结果如下：</p><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>因为我们传入的请求参数 <code>gender</code> 的值为 null ，显然不在 GenderEnum 范围内，所以校验不通过，输出 <code>&quot;性别必须是 [1, 2]&quot;</code> 。</p><h2 id="分组校验" tabindex="-1"><a class="header-anchor" href="#分组校验" aria-hidden="true">#</a> 分组校验</h2><p>在一些业务场景下，我们需要使用分组校验，即相同的 Bean 对象，根据校验分组，使用不同的校验规则。很少会有这方面的诉求。即使有，也是拆分不同的 Bean 类。这里提供一下对应的示例。</p><p>在 com.ezfri.springboot.validation.dto 包路径下，创建 UserUpdateStatusDTO 类，为用户更新状态 DTO 。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// UserUpdateStatusDTO.java</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserUpdateStatusDTO</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 分组 01 ，要求状态必须为 true
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Group01</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 状态 02 ，要求状态必须为 false
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Group02</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/**
     * 状态
     */</span>
    <span class="token annotation punctuation">@AssertTrue</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;状态必须为 true&quot;</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> <span class="token class-name">Group01</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@AssertFalse</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;状态必须为 false&quot;</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> <span class="token class-name">Group02</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> status<span class="token punctuation">;</span>

    <span class="token comment">// ... 省略 set/get 方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建了 Group01 和 Group02 接口，作为两个校验分组。不一定要定义在 UserUpdateStatusDTO 类中，这里仅仅是为了方便。</li><li><code>status</code> 字段，在 Group01 校验分组时，必须为 <code>true</code> ；在 Group02 校验分组时，必须为 <code>false</code> 。</li></ul><h3 id="usercontroller-2" tabindex="-1"><a class="header-anchor" href="#usercontroller-2" aria-hidden="true">#</a> UserController</h3><p>修改 UserController 类，增加两个修改状态的 API 接口。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// UserController.java</span>

<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/update_status_true&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateStatusTrue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span><span class="token class-name">UserUpdateStatusDTO<span class="token punctuation">.</span>Group01</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token class-name">UserUpdateStatusDTO</span> updateStatusDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[updateStatusTrue][updateStatusDTO: {}]&quot;</span><span class="token punctuation">,</span> updateStatusDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/update_status_false&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateStatusFalse</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span><span class="token class-name">UserUpdateStatusDTO<span class="token punctuation">.</span>Group02</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token class-name">UserUpdateStatusDTO</span> updateStatusDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[updateStatusFalse][updateStatusDTO: {}]&quot;</span><span class="token punctuation">,</span> updateStatusDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于 <code>#updateStatusTrue(updateStatusDTO)</code> 方法，我们在 <code>updateStatusDTO</code> 参数上，添加了 <code>@Validated</code> 注解，并且设置校验分组为 Group01 。校验不通过示例如下图：</li></ul><figure><img src="`+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>对于 <code>#updateStatusFalse(updateStatusDTO)</code> 方法，我们在 <code>updateStatusDTO</code> 参数上，添加了 <code>@Validated</code> 注解，并且设置校验分组为 Group02 。校验不通过示例如下图：</li></ul><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>所以，使用分组校验，核心在于添加上 <code>@Validated</code> 注解，并设置对应的校验分组。</p><h2 id="手动校验" tabindex="-1"><a class="header-anchor" href="#手动校验" aria-hidden="true">#</a> 手动校验</h2><p>在上面的示例中，我们使用的主要是 Spring Validation 的声明式注解。然而在少数业务场景下，我们可能需要手动使用 Bean Validation API ，进行参数校验。</p><p>修改 UserServiceTest 测试类，增加手动参数校验的示例。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// UserServiceTest.java</span>

<span class="token annotation punctuation">@Autowired</span> <span class="token comment">// &lt;1.1&gt;</span>
<span class="token keyword">private</span> <span class="token class-name">Validator</span> validator<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 打印，查看 validator 的类型 // &lt;1.2&gt;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>validator<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建 UserAddDTO 对象 // &lt;2&gt;</span>
    <span class="token class-name">UserAddDTO</span> addDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserAddDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 校验 // &lt;3&gt;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConstraintViolation</span><span class="token punctuation">&lt;</span><span class="token class-name">UserAddDTO</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>addDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 打印校验结果 // &lt;4&gt;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConstraintViolation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserAddDTO</span><span class="token punctuation">&gt;</span></span> constraintViolation <span class="token operator">:</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 属性:消息</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constraintViolation<span class="token punctuation">.</span><span class="token function">getPropertyPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> constraintViolation<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>&lt;1.1&gt;</code> 处，注入 Validator Bean 对象。</p></li><li><p><code>&lt;1.2&gt;</code> 处，打印 <code>validator</code> 的类型。输出如下：</p></li></ul><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>org.springframework.validation.beanvalidation.LocalValidatorFactoryBean@48c3205a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,78),dn=n("code",null,"validator",-1),rn={href:"https://github.com/spring-projects/spring-framework/blob/main/spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java",target:"_blank",rel:"noopener noreferrer"},kn={href:"https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.java",target:"_blank",rel:"noopener noreferrer"},vn=n("li",null,[n("p",null,[n("code",null,"<2>"),a(" 处，创建 UserAddDTO 对象，即 「3.3 UserAddDTO」 ，已经添加相应的约束注解。")])],-1),mn=n("li",null,[n("p",null,[n("code",null,"<3>"),a(" 处，调用 "),n("code",null,"Validator#validate(T object, Class<?>... groups)"),a(" 方法，进行参数校验。")])],-1),gn=n("li",null,[n("p",null,[n("code",null,"<4>"),a(" 处，打印校验结果。输出如下：")])],-1),bn=e(`<div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>username:登录账号不能为空
password:密码不能为空
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果校验通过，则返回的 Set&lt;ConstraintViolation&lt;?&gt;&gt; 集合为空。</li></ul><h2 id="国际化-i18n" tabindex="-1"><a class="header-anchor" href="#国际化-i18n" aria-hidden="true">#</a> 国际化 i18n</h2><p>在一些项目中，我们会有国际化的需求，特别是我们在做 TOB 的 SASS 化服务的时候。那么，显然我们在使用 Bean Validator 做参数校验的时候，也需要提供国际化的错误提示。</p><p>给力的是，Hibernate Validator 已经内置了国际化的支持，所以我们只需要简单的配置，就可以实现国际化的错误提示。</p><h3 id="应用配置文件" tabindex="-1"><a class="header-anchor" href="#应用配置文件" aria-hidden="true">#</a> 应用配置文件</h3><p>在 <code>resources</code> 目录下，创建 <code>application.yaml</code> 配置文件。配置如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token comment"># i18 message 配置，对应 MessageSourceProperties 配置类</span>
  <span class="token key atrule">messages</span><span class="token punctuation">:</span>
    <span class="token key atrule">basename</span><span class="token punctuation">:</span> i18n/messages <span class="token comment"># 文件路径基础名</span>
    <span class="token key atrule">encoding</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span> <span class="token comment"># 使用 UTF-8 编码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们在 <code>resources/i18</code> 目录下，创建不同语言的 messages 文件。如下：</p><ul><li>messages.properties ：默认的 i18 配置文件。</li></ul><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">UserUpdateDTO.id.NotNull</span><span class="token punctuation">=</span><span class="token value attr-value">用户编号不能为空</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>messages_en.properties ：英文的 i18 配置文件。</li></ul><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">UserUpdateDTO.id.NotNull</span><span class="token punctuation">=</span><span class="token value attr-value">userId cannot be empty</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>messages_ja.properties ：日文的 i18 配置文件。</li></ul><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">UserUpdateDTO.id.NotNull</span><span class="token punctuation">=</span><span class="token value attr-value">ユーザー番号は空にできません</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="validationconfiguration" tabindex="-1"><a class="header-anchor" href="#validationconfiguration" aria-hidden="true">#</a> ValidationConfiguration</h3><p>在 <code>com.ezfri.springboot.validation.config</code> 包路径下，创建 ValidationConfiguration 配置类，用于创建一个支持 i18 国际化的 Validator Bean 对象。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// ValidationConfiguration.java</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidationConfiguration</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 参考 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ValidationAutoConfiguration</span><span class="token punctuation">#</span><span class="token function">defaultValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> 方法，构建 Validator Bean
     *
     * <span class="token keyword">@return</span> Validator 对象
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Validator</span> <span class="token function">validator</span><span class="token punctuation">(</span><span class="token class-name">MessageSource</span> messageSource<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
        <span class="token comment">// 创建 LocalValidatorFactoryBean 对象</span>
        <span class="token class-name">LocalValidatorFactoryBean</span> validator <span class="token operator">=</span> <span class="token class-name">ValidationAutoConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置 messageSource 属性，实现 i18 国际化</span>
        validator<span class="token punctuation">.</span><span class="token function">setValidationMessageSource</span><span class="token punctuation">(</span>messageSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回</span>
        <span class="token keyword">return</span> validator<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="userupdatedto" tabindex="-1"><a class="header-anchor" href="#userupdatedto" aria-hidden="true">#</a> UserUpdateDTO</h3><p>在 <code>com.ezfri.springboot.validation.dto</code> 包路径下，创建 UserUpdateDTO 类，为用户更新 DTO 。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// UserUpdateDTO.java</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserUpdateDTO</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 用户编号
     */</span>
    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;{UserUpdateDTO.id.NotNull}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

    <span class="token comment">// ... 省略 get/set 方法</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>不同于我们上面看到的约束注解的 message 属性的设置，这里我们使用了 {} 占位符。</li></ul><h3 id="usercontroller-3" tabindex="-1"><a class="header-anchor" href="#usercontroller-3" aria-hidden="true">#</a> UserController</h3><p>修改 UserController 类，增加用户更新的 API 接口。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// UserController.java</span>

<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/update&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token class-name">UserUpdateDTO</span> updateDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[update][updateDTO: {}]&quot;</span><span class="token punctuation">,</span> updateDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面，我们来进行下 API 接口测试。有一点要注意，SpringMVC 通过 <code>Accept-Language</code> 请求头，实现 i18n 国际化。</p><ul><li>Accept-Language = zh 的情况，响应结果如下：</li><li></li></ul><figure><img src="`+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Accept-Language = en 的情况，响应结果如下：</li></ul><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Accept-Language = ja 的情况，响应结果如下：</li></ul><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>至此，我们的 Validator 的 i18n 国际化已经完成了。 不过细心的胖友，会发现 &quot;请求参数不合法&quot; 并没有国际化处理。是的~实际上，国际化是个大工程，涉及到方方面面。例如说，业务信息表的国际化，商品同时支持中文、英文、韩文等多种语言。</p>',33);function hn(fn,yn){const s=i("ExternalLinkIcon");return p(),c("div",null,[y,w,x,V,n("blockquote",null,[n("p",null,[a("FROM "),n("a",_,[a("https://beanvalidation.org/specification/"),t(s)])]),T,S,O,A,E]),j,n("ul",null,[n("li",null,[a("在 "),n("a",D,[a("Bean Validation API"),t(s)]),a(" 中，定义了 Bean Validation 相关的接口，并没有具体实现。")]),U]),q,n("ul",null,[n("li",null,[n("a",I,[a("Hibernate Validator"),t(s)])]),n("li",null,[n("a",C,[a("Apache BVal"),t(s)])])]),B,n("p",null,[n("a",P,[R,t(s)]),a(" 注解，是 Bean Validation 所定义，可以添加在普通方法、构造方法、方法参数、方法返回、成员变量上，表示它们需要进行约束校验。")]),n("p",null,[n("a",M,[N,t(s)]),a(" 注解，是 Spring Validation 锁定义，可以添加在类、方法参数、普通方法上，表示它们需要进行约束校验。同时，"),G,a(" 有 "),L,a(" 属性，支持分组校验。属性如下：")]),H,n("p",null,[a("因为 "),z,a(" 使用了 "),F,a(" 注解，那么 Spring Validation 就会使用 AOP 进行切面，进行参数校验。而该切面的拦截器，使用的是 "),n("a",J,[a("MethodValidationInterceptor"),t(s)]),a(" 。")]),Y,n("ul",null,[n("li",null,[n("p",null,[a("对于 "),Q,a(" 方法，在 MethodValidationInterceptor 拦截器中，校验到参数不正确，会抛出 "),n("a",Z,[a("ConstraintViolationException"),t(s)]),a(" 异常。")])]),n("li",null,[n("p",null,[a("对于 "),W,a(" 方法，因为 "),X,a(" 是个 POJO 对象，所以会走 SpringMVC 的 "),n("a",$,[a("DataBinder"),t(s)]),a(" 机制，它会调用 "),K,a(" 方法，进行校验。在校验不通过时，会抛出 "),n("a",nn,[a("BindException"),t(s)]),a(" 。 在 SpringMVC 中，默认使用 "),n("a",an,[a("DefaultHandlerExceptionResolver"),t(s)]),a(" 处理异常。")])]),sn,tn]),en,n("ol",null,[n("li",null,[a("无论是 "),on,a(" 方法，还是 "),pn,a(" 方法，它们的返回提示都非常不友好,可以通过使用 "),n("a",cn,[ln,t(s)]),a(" 注解，实现自定义的异常处理。")])]),un,n("ul",null,[n("li",null,[n("p",null,[dn,a(" 的类型为 "),n("a",rn,[a("LocalValidatorFactoryBean"),t(s)]),a(" 。LocalValidatorFactoryBean 提供 JSR-303、JSR-349 的支持，同时兼容 Hibernate Validator 。")])]),n("li",null,[n("p",null,[a("在 Spring Boot 体系中，使用 "),n("a",kn,[a("ValidationAutoConfiguration"),t(s)]),a(" 自动化配置类，默认创建 LocalValidatorFactoryBean 作为 Validator Bean 。")])]),vn,mn,gn]),bn])}const xn=o(f,[["render",hn],["__file","validation.html.vue"]]);export{xn as default};
