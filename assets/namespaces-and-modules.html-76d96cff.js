import{_ as c,W as l,X as d,$ as a,a0 as s,Z as n,a2 as t,a1 as i,C as o}from"./framework-b609eea8.js";const r={},u=a("h1",{id:"命名空间和模块",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#命名空间和模块","aria-hidden":"true"},"#"),s(" 命名空间和模块")],-1),k={href:"https://262.ecma-international.org/6.0/",target:"_blank",rel:"noopener noreferrer"},m=a("code",null,"module X {",-1),h=a("code",null,"namespace X {",-1),v=a("h2",{id:"介绍",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),s(" 介绍")],-1),y=a("p",null,"这篇文章将概括介绍在TypeScript里使用模块与命名空间来组织代码的方法。 我们也会谈及命名空间和模块的高级使用场景，和在使用它们的过程中常见的陷阱。",-1),b=i(`<h2 id="使用命名空间" tabindex="-1"><a class="header-anchor" href="#使用命名空间" aria-hidden="true">#</a> 使用命名空间</h2><p>命名空间是位于全局命名空间下的一个普通的带有名字的JavaScript对象。 这令命名空间十分容易使用。 它们可以在多文件中同时使用，并通过<code>--outFile</code>结合在一起。 命名空间是帮你组织Web应用不错的方式，你可以把所有依赖都放在HTML页面的<code>&lt;script&gt;</code>标签里。</p><p>但就像其它的全局命名空间污染一样，它很难去识别组件之间的依赖关系，尤其是在大型的应用中。</p><h2 id="使用模块" tabindex="-1"><a class="header-anchor" href="#使用模块" aria-hidden="true">#</a> 使用模块</h2><p>像命名空间一样，模块可以包含代码和声明。 不同的是模块可以声明它的依赖。</p><p>模块会把依赖添加到模块加载器上（例如CommonJs / Require.js）。 对于小型的JS应用来说可能没必要，但是对于大型应用，这一点点的花费会带来长久的模块化和可维护性上的便利。 模块也提供了更好的代码重用，更强的封闭性以及更好的使用工具进行优化。</p><p>对于Node.js应用来说，模块是默认并推荐的组织代码的方式。</p><p>从ECMAScript 2015开始，模块成为了语言内置的部分，应该会被所有正常的解释引擎所支持。 因此，对于新项目来说推荐使用模块做为组织代码的方式。</p><h2 id="命名空间和模块的陷阱" tabindex="-1"><a class="header-anchor" href="#命名空间和模块的陷阱" aria-hidden="true">#</a> 命名空间和模块的陷阱</h2><p>这部分我们会描述常见的命名空间和模块的使用陷阱和如何去避免它们。</p><h3 id="对模块使用-reference" tabindex="-1"><a class="header-anchor" href="#对模块使用-reference" aria-hidden="true">#</a> 对模块使用<code>/// &lt;reference&gt;</code></h3><p>一个常见的错误是使用<code>/// &lt;reference&gt;</code>引用模块文件，应该使用<code>import</code>。 要理解这之间的区别，我们首先应该弄清编译器是如何根据<code>import</code>路径（例如，<code>import x from &quot;...&quot;;</code>或<code>import x = require(&quot;...&quot;)</code>里面的<code>...</code>，等等）来定位模块的类型信息的。</p><p>编译器首先尝试去查找相应路径下的<code>.ts</code>，<code>.tsx</code>再或者<code>.d.ts</code>。 如果这些文件都找不到，编译器会查找外部模块声明。 回想一下，它们是在<code>.d.ts</code>文件里声明的。</p><ul><li>myModules.d.ts</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// In a .d.ts file or .ts file that is not a module:</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;SomeModule&quot;</span> <span class="token punctuation">{</span>
    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>myOtherModule.ts</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/// &lt;reference path=&quot;myModules.d.ts&quot; /&gt;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m <span class="token keyword">from</span> <span class="token string">&quot;SomeModule&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的引用标签指定了外来模块的位置。 这就是一些TypeScript例子中引用<code>node.d.ts</code>的方法。</p><h3 id="不必要的命名空间" tabindex="-1"><a class="header-anchor" href="#不必要的命名空间" aria-hidden="true">#</a> 不必要的命名空间</h3><p>如果你想把命名空间转换为模块，它可能会像下面这个文件一件：</p><ul><li>shapes.ts</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">namespace</span> Shapes <span class="token punctuation">{</span>
    <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
    <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>顶层的模块<code>Shapes</code>包裹了<code>Triangle</code>和<code>Square</code>。 对于使用它的人来说这是令人迷惑和讨厌的：</p><ul><li>shapeConsumer.ts</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> shapes <span class="token keyword">from</span> <span class="token string">&quot;./shapes&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">shapes</span><span class="token punctuation">.</span>Shapes<span class="token punctuation">.</span><span class="token function">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// shapes.Shapes?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeScript里模块的一个特点是不同的模块永远也不会在相同的作用域内使用相同的名字。 因为使用模块的人会为它们命名，所以完全没有必要把导出的符号包裹在一个命名空间里。</p><p>再次重申，不应该对模块使用命名空间，使用命名空间是为了提供逻辑分组和避免命名冲突。 模块文件本身已经是一个逻辑分组，并且它的名字是由导入这个模块的代码指定，所以没有必要为导出的对象增加额外的模块层。</p><p>下面是改进的例子：</p><ul><li>shapes.ts</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>shapeConsumer.ts</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> shapes <span class="token keyword">from</span> <span class="token string">&quot;./shapes&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">shapes</span><span class="token punctuation">.</span><span class="token function">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模块的取舍" tabindex="-1"><a class="header-anchor" href="#模块的取舍" aria-hidden="true">#</a> 模块的取舍</h3><p>就像每个JS文件对应一个模块一样，TypeScript里模块文件与生成的JS文件也是一一对应的。 这会产生一种影响，根据你指定的目标模块系统的不同，你可能无法连接多个模块源文件。 例如当目标模块系统为<code>commonjs</code>或<code>umd</code>时，无法使用<code>outFile</code>选项，但是在TypeScript 1.8以上的版本能够使用<code>outFile</code>当目标为<code>amd</code>或<code>system</code>。</p>`,34);function g(f,_){const p=o("ExternalLinkIcon"),e=o("RouterLink");return l(),d("div",null,[u,a("blockquote",null,[a("p",null,[s("关于术语的一点说明: 请务必注意一点，TypeScript 1.5里术语名已经发生了变化。 “内部模块”现在称做“命名空间”。 “外部模块”现在则简称为“模块”，这是为了与"),a("a",k,[s("ECMAScript 2015"),n(p)]),s("里的术语保持一致，(也就是说 "),m,s(" 相当于现在推荐的写法 "),h,s(")。")])]),v,y,a("p",null,[s("查看"),n(e,{to:"/kb/frontend/basic/typescript/modules.html"},{default:t(()=>[s("模块")]),_:1}),s("章节了解关于模块的更多信息。 查看"),n(e,{to:"/kb/frontend/basic/typescript/namespaces.html"},{default:t(()=>[s("命名空间")]),_:1}),s("章节了解关于命名空间的更多信息。")]),b])}const x=c(r,[["render",g],["__file","namespaces-and-modules.html.vue"]]);export{x as default};
